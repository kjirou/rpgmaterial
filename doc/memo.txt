あいう

----
開発ローカルルール:
- 変数名重複回避のため、抽象基底クラスのプライベートプロパティは末尾に _ を付ける
  - 継承回数で _ が増える
- 継承される可能性があるクラスのプライベートメソッドは基本ローカル変数でクロージャにする
- _initializeや_validateなどの重複しそうなプロパティ名を付ける場合は、末尾にクラス名を付けること
  _initializeXXXMixin のように, その場合は重複回避の _ は不要
- 生成関数について
  - パブリックアクセスの生成関数は、末端クラスのみで直接定義する
    もし _factory と同じならそのまま factory へ代入する
  - 継承可能なクラスは、生成時に必ず_factoryを通らせる
    - 継承不可能な子クラスではそれを以下のようにパブリックアクセスに書き換える
      SubClass.factory = function(superArg, myArg){
          // スコープはサブクラスである点に注意
         var obj = SuperClass._factory.apply(this, [superArg]);
          obj._myArg = myArg;
          return obj;
      }
      *)処理が不要なら SubClass.factory = SuperClass._factory; と丸コピでいい
   - 更に継承可能なクラスを作る場合は、このように設定する
     SubClass._factory = function(superArg, myArg){
         // 最初は _factory は必ず継承時にサブクラスへコピーして、this._factory でやってたが
         // 間違えて this._factory = function(){this._factory()} で無限ループになるので止めた
         // 一つ継承時の変数が減って見通しが良くなるし
         var obj = SuperClass._factory.apply(this, [superArg]);
         obj._myArg = myArg;
         return obj;
     }
     *)継承可能かつ実行可能な場合な、加えて factory や factoryXXX などのアクセス用生成関数を作る
   - だから _factory か factory は必ず持つようになる
- 当ライブラリのトップクラス名は変数で持たずに必ず文字列でベタ書きする
  変数で持つとエラーを書く際に面倒なのでNG, だからどうせなら一括置換に合わせて変数を禁止する
- エラーテキストは 'ライブラリ名:[親クラス名.]クラス名.メソッド名, ' をプレフィックスにつけて
  かつこの部分は文字列でベタ書きする
  - 場所を書くのはIE6で場所を追跡する機能が無いから, IE8も賢いとは言えないので
    最悪場所だけは直ぐ辿れるようにエラー位置だけは明記する
  - 文字列で書くのは検索で見つけられるように
  - おバカなデバッガに合わせて考える, 賢い環境ならそもそもこっちで配慮する必要性が薄い
  - 内容部分は 'invalid paramter'(引数が悪い) か 'invalid situation'(その他何かが悪い) だけでもいい
    防げてればOK
- 用語
  pos:    [top, left] を示す, 位置・座標
  size:   [width, height] を示す, サイズ・大きさ
  index:  [row, column] を示す, 位置・場所・マスインデックス・インデックス
  extent: [columnCount, rowCount] を示す, 広さ, 行列サイズ

  extent は エクセルと同じように 行x列 にしようかと思ったが
  size の概念の方が強力なのでそれに合わせることにした
  例えばゲーム盤のサイズに「3x5」と書いてあったら、おそらくは 列３・行５ を思い浮かべると思う

  インデックスとサイズが描画界と行列界のそれぞれセットで逆転しているという
  良くない方に整合性も取れているし・・・

  ただ、ゲーム盤的には [列,行] みたい
  ちなみに、将棋は右上を [１,一] として 「３六」などの [列,行] の順で呼称
  チェスは左下を [a,1] として 「g5」などの [列,行] の順で呼称

  でも、Webのイメージの方がどうしても強いからNG

----
後回し残タスク:
- DialogBlockを作る, Windowとは分ける、連携は背景にWindowを入れることで実現する
- Window の縦可変長は可能か？　WindowDialogを作るためには無いと不便　でも多分無理
  - 絶対座標を強制するBlockの仕組みが一番ネック、その部分を変えてもいいのか？
- 入力フォーム機能, 要件が良くわかってないので使いながら修正できる体制を作るのが第一
- ダイアログウィンドウ、選択肢を設定できる
- MergedChip = 複数のチップをつなげて一枚のチップにしたもの、ダンジョンマップなど
- Movie = Blockサブクラス、現暫定SimpleStoryBlock を使って要件が見えたら考える
          Flashのタイムライン作成時のUIを参考にする
- AA対応
- _cloneData はクラスメソッドにする


----
忘れてもいいようなメモ：
- JSGameLikerにしようと思っら JavaScript Graphic Libraly が JSGL だったので止めた


----
Blockの要件とViewエンジンとの関係についてのメモ

//
// 開発メモ
//
// - 表示の最小・基本単位, にしたいけど描画エンジンをまま呼んだ方が断然楽なので保留
//   逆に、必要な要件を明記して、それに対応した形に都度整理することにする
// - 要件:
//   1 Blockの親になれるのはBlockのみ, 間に管理されていない階層を含むのはNG
//   2 外部から参照される場合はBlockでないといけない, _view にアクセサは付けちゃダメ
//   3 Blockは絶対座標による配置にする
//   4 直接の親、直接の子供 を取得できる
//   5 画面内での絶対座標を取得できる, これは親子関係が取得できるので自動的に解決のはず
//   6 親が削除されたら全子供を削除, 付属するイベントや非同期処理も同時に削除
// - 例として jQueryの append / remove / empty はBlockのメソッドを使うことになる
// - Blockを呼ぶか描画エンジンで直接書くかの違いは、まずは上記 1, 2 の要件が基準になる
//   その後に明確な基準は無いが、とりあえず機能別のルートビューはBlockにしとくと無難
// - 描画エンジンが変わったらここを書き換えれば良いように意識しとく, でも最初は気にし過ぎない
//


----
スタイルを全部JS内で設定しようと思ってたけど止めた理由：

// ! 全部JSで設定できるようにしようと思ったが大変かつ意味が薄いので止めた
//   特に、ユーザから上書き設定できないといけないので、全てのビュー要素への
//   CSS更新方法を付けないといけない点が超無理
// ! また、ビューを外部に出さないという方針もあるので、より更新しにくい
// ! ということで、ここで設定するのは以下の条件に合致するものだけ
//   1)ブロックに対してのみ 2) 変えちゃいけないか滅多に変えない点のみ
//   overflowでギリギリ
// ! どうせサブクラスを作って実装するんだからいいやと思ってたが
//   ウィンドウのようにブロック構成が複雑なものに1ビューまでの参照を作るとか
//   RichTextのようにパーツとしてビュー生成するものの各利用場所で
//   生成したビューまでの参照を作るとか、致命的に無理だった
//
//lineHeight: '15px',
//fontFamily: '"Verdana", "ＭＳ Ｐゴシック", "Osaka", "sans-serif"',
//fontSize: 12, // 標準で使うものは 9, 12, 13.5, 15 のいずれかにする
//fontWeight: 'normal',
//letterSpacing: 1,
//color: '#000',
//textAlign: 'left',


----
opacity を基本的に設定しちゃいけない理由

// opacityは基本的に使わない, IE8で以下のような挙動になることがある
// - 座標が動かなくなる, つまりチップアニメーションができなくなる
// - 半透過部分が黒くなる
// - divのmousedownイベントが発生しなくなった
// 発生条件は良くわかってない
// fadeIn/fadeOut時に付与されてしまう点への対策はremoveIEOpacityCurse参照
//opacity: 1.0


----
